CREATE DATABASE tutorials;    #데이터베이스(스키마) tutorials 생성
DROP DATABASE tutorials;      #데이터베이스(스키마) tutorials 삭제
SHOW DATABASES;                   #생성된 데이터베이스 LIST 확인
USE opentutorials;                #SQL에게 opentutorials스키마를 사용하겠다고 알려준다.(이후 사용하는 명령은 opentutorials라는 스키마에 있는 표를 대상으로 수행된다.)
SET PASSWORD = PASSWORD('사용할 비밀번호');   #MySQL에 접속할 때 사용할 비밀번호를 바꿀 수 있다.

CREATE TABLE topic(                          #topic이라는 table을 만들거고 () 안에 
  id INT(11) NOT NULL AUTO_INCREMENT,          #id는 숫자로 받아올 것이기에 INT를 사용했고 ()안에 들어가는 값은 숫자를 얼만큼 저장할 것인가가 아닌 검색같은 기능에서 얼마만큼 노출을 시킬 것인가를 의미한다
                                               #id 값이 없으면 검색을 할 수 없어 삭제, 수정 등을 할 수 없기에 값이 없는채로 추가되지 않도록 NOT NULL을 사용한다. -> 이 TABLE에서 식별자로 사용할 것이기 때문이다.
                                               #id 값이 중복이 가능하다면 삭제, 수정 등을 할 때 문제가 생길 수 있기에 AUTO_INCREMENT를 사용한다.
                                                -> 여기서는 숫자를 사용하기에 id는 입력을 받아서 저장하지 않고 title등의 데이터가 입력되면 자동으로 마지막 id값 보다 1증가된 값이 저장 되게끔 한다.
  title VARCHAR(100) NOT NULL,                 #title은 문자를 입력받고 제목이기에 내용이 100글자 미만으로 제한했다.
                                               #VARCHAR = 가변길이 문자열로 생성한다. (저장공간을 무의미하게 차지하지 않기 위함이다.)
                                               #CHAR의 경우 매 입력마다 100의 공간을 차지하지만 VARCHAR의 경우 입력 값 만큼의 공간을 차지한다.
  description TEXT NULL,                       #본문이기에 TINYTEXT는 너무 작고, MEDIUMTEXT 이상은 너무 커 TEXT가 적당할 것 같다.(또한, 본문의 경우 값이 없는 경우를 허용한다.)
  created DATETIME NOT NULL,                   #DATETIME의 경우는 날짜와 시간을 모두 표현할 수 있다.(날짜와 시간이 필수로 필요한 것이 아니면 NOT NULL을 NULL로 바꿔주면 된다.
  author VARCHAR(15) NULL,                     #익명이 글을 쓸 수도 있으니 NULL로 해주었다.
  profile VARCHAR(200) NULL,                   #마찮가지로 자기소개를 안할 수도 있으니 NULL로 해주었다.
  PRIMARY KEY(id)                              #PRIMARY KEY()는 ()안에 MAIN KEY로 사용할 column을 입력해주면 된다.
);

DESC topic;        #topic의 구조를 보여준다.
INSERT INTO topic (title,description,created,author,profile) VALUES('MySQL','MySQL is ...',NOW(),'Raccoon','student');
                                                                 #column값을 입력하기 위해 INSERT 명령어를 사용했고 topic이라는 TABLE에 넣는다는 의미로 INTO topic을 사용
                                                                 #id의 경우 AUTO_INCREMENT를 사용해 입력하지 않아도 자동으로 1씩 증가하기에 값을 입력하지 않았고
                                                                 #첫 ()안에는 내가 입력할 값이 어느 column에 입력될 것인지를 입력할 값은 VALUES()의 괄호 안에 넣는다.
                                                                 #첫 ()안의 column명과 VALUES로 입력할 값의 순서가 일치해야 해당 column명의 값으로 입력값이 입력된다.
                                                                 #날짜와 시간의 경우 직접입력해도 되지만 현재시간을 입력할 것이라면 현재시간을 반환하는 NOW()함수를 사용해도 된다
                                                                 #author와 profile은 NOT NULL이 아니기에 입력하지 않아도 된다.

SELECT * FROM topic;              #SELECT = 가져온다. * = 모든 정보를, FROM topic; = topic TABLE에서      -> topic TABLE에 저장된 모든 데이터를 가져온다.

INSERT INTO topic (title,description,created,author,profile) VALUES('ORACLE', 'ORACLE IS ...', NOW(), 'Raccoon', 'developer');
INSERT INTO topic (title,description,created,author,profile) VALUES('SQL Server', 'SQL Server is ...', NOW(), 'duru', 'data administrator');
INSERT INTO topic (title,description,created,author,profile) VALUES('PostgreSQL', 'PostgreSQL is ...', NOW(), 'taeho', 'data scientist, developer');
INSERT INTO topic (title,description,created,author,profile) VALUES('MongoDB', 'MongoDB is ...', NOW(), 'Raccoon', 'student');

SELECT id,title,created,author FROM topic;      #SELECT와 FROM 사이에 *이 아닌 column의 주제를 입력하면 해당 column을 제외한 값은 출력이 되지 않는다. 이 경우엔 profile값은 출력되지 않는다.

SELECT id,title,created,author FROM topic WHERE author='Raccoon';      #id,title,created,author의 값들을 출력하는데, WHERE문을 사용해 author값이 Raccoon인 row만 출력이 된다.

SELECT id,title,created,author FROM topic WHERE author='Raccoon' ORDER BY id DESC;      #위 명령어의 값에서 id를 기준으로 Descending(내림차순)으로 출력이 된다.

SELECT id,title,created,author FROM topic WHERE author='Raccoon' ORDER BY id DESC LIMIT 2;            #2개의 행(row)만 출력이 된다.
                                                                                                      #SQL은 엄청 많은 데이터를 저장할 수 있기에 그냥 SELECT * FROM [TABLE] 명령을 사용한다면 문제가 생길 수 있다.
                                                                                                      #그래서 LIMIT을 사용해 제약을 걸 수 있다.

UPDATE topic SET description='Oracle is Oracle', title='Oracle', profile='student' WHERE id=2;                #topic 테이블의 description은 Oracle is Oracle로, title은 Oracle로, profile은 student로 바꾼다.
                                                                                           #UPDATE [태이블 명] SET [바꿀 column명=바꾸고 싶은 값]을 입력하면 된다.
                                                                                           #여기서 WHERE id=2를 사용하지 않으면 모든 row의 description과 title column의 값들이 바뀐다.
                                                                                           #WHRER id=2를 통해 description과 title 값을 바꿀 row행을 지정해준다.

DELETE FROM topic WHERE id=5;                #5번째 행을 삭제한다.

***** 삭제와 수정을 할 때 WHERE 명령을 까먹으면 재앙이 일어나니 꼭 기억해서 작성해야한다. *****

RENAME TABLE topic TO topic_backup;         #author의 중복값을 개선하기 위해 author 테이블을 생성해 새롭게 정리할 것인데 실수로 topic테이블이 날라갈 수 있으니 변경전의 topic테이블을 topic_backup으로 변경해 놓았다.

CREATE TABLE `topic` (                      
  `id` int(11) NOT NULL AUTO_INCREMENT,     #topic 테이블을 기존과 똑같이 생성하지만 author와 profile부분은 바뀐다.
  `title` varchar(100) NOT NULL,
  `description` text,
  `created` datetime NOT NULL,
  `author_id` int(11) DEFAULT NULL,         #author와 profile의 부분은 author태이블로 따로 만들 것이기에 여기엔 author테이블의 id값(row값)을 저장한다.
  PRIMARY KEY (`id`)
);

INSERT INTO `topic` (id, title, description, created, author_id) VALUES (1,'MySQL','MySQL is...','2024-02-13 21:08:16',1);                #시간은 원래 topic 이블과 같은 값으로 입력하기 위해 직접 입력을 해주었다.
INSERT INTO `topic` (id, title, description, created, author_id) VALUES (2,'Oracle','Oracle is ...','2024-02-13 21:15:39',1);
INSERT INTO `topic` (id, title, description, created, author_id) VALUES (3,'SQL Server','SQL Server is ...','2024-02-13 21:15:45',2);
INSERT INTO `topic` (id, title, description, created, author_id) VALUES (4,'PostgreSQL','PostgreSQL is ...','2024-02-13 21:15:57',3);
INSERT INTO `topic` (id, title, description, created, author_id) VALUES (5,'MongoDB','MongoDB is ...','2024-02-13 21:16:04',1);




CREATE TABLE `author` (                                #author 테이블을 새로 생성한다.
  `id` int(11) NOT NULL AUTO_INCREMENT,                #id는 int값으로 받고 key값으로 사용할 것이기에 NOT NULL이다. 또한 row가 생길때 마다 이전 row보다 1증가한 값이 자동으로 입력된다.
  `name` varchar(20) NOT NULL,                         #author 테이블에는 name과 profile이라는 column만 만든다.
  `profile` varchar(200) DEFAULT NULL,                 
  PRIMARY KEY (`id`)                                   #author 테이블도 PRIMARY KEY값은 id로 한다.
);

INSERT INTO `author` (id, name, profile) VALUES (1, 'Raccoon','student');                      #원래 topic 테이블에서 author와 profile의 값을 name과 profile이라는 column으로 나누어 저장해 준다.
INSERT INTO `author` (id, name, profile) VALUES (2, 'duru','data administrator');
INSERT INTO `author` (id, name, profile) VALUES (3, 'taeho','data scientist, developer');

SELECT * FROM topic LEFT JOIN author ON topic.author_id = author.id;            #author_id의 값과 author.id의 값을 매개로 JOIN을 사용하여 합쳐서 출력 했다.
#위의 결과를 보면 author_id의 값과 author테이블의 id값이 출력이 된다. -> 하지만 우리는 id 값은 필요가 없기에 이를 없앤 출력값을 출력해보자

SELECT topic.id,title,description,created,name,profile FROM topic LEFT JOIN author ON topic.author_id = author.id;      #그냥 id를 출력하라고 하면 topic테이블의 id인지, author테이블의 id인지 구분을 못해 topic.id로 표시했다.

SELECT topic.id AS topic_id,title,description,created,name,profile FROM topic LEFT JOIN author ON topic.author_id = author.id;
#topic.id로 사용하면 출력값의 column값은 그냥 id로 출력되기에 사용자가 햇갈릴 수 있으니 AS를 사용해 column값이 topic_id로 출력되게끔 바꾸었다.

------------------------------------------------------------------------------------------------------------------------------------------------------------
ALTER TABLE topic_backup DROP COLUMN author, DROP COLUMN profile;        #여러개의 column을 삭제할 수 있다.
ALTER TABLE topic_backup ADD author_id int(11) NULL;                     #author_id column을 추가해준다.
ALTER TABLE topic_backup MODIFY column author_id int(11) DEFAULT NULL;   #author_id를 NULL로 설정한것을 DEFAULT NULL로 변경했다.
                                                                         #컬럼 수정은 CHANGE를 이용해 수정하면 된다.




